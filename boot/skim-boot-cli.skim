(define-library (skim boot cli)
  (export compile compile_file start)

  (import (only (./skim boot emitter) emit))
  (import (only (./skim boot parser) parse))
  (import (only (./skim boot environ) make-environment))

  (define (print x)
    (display x)
    (newline))

  (define (compile source)
    (define global-env (make-environment nil))
    (define ast (parse source))
    (define expanded ast)
    (define output (emit expanded global-env))
    (define formatted (skim-prettier output))
    formatted)

  (define (compile_file name save_output)
    (define source (skim-load name))
    (define output (compile source))
    (define new-name (string-replace name ".skim" ".js"))
    (set! new-name (string-replace new-name ".ss" ".js"))
    (set! new-name (string-replace new-name ".scm" ".js"))
    (when save_output (skim-save new-name output))
    output)

  (define output "")

  (define (skim-help)
    (define help "")
    (set! help (string-append help "SkimJS" "\n"))
    (set! help (string-append help "skim: repl/TBD" "\n"))
    (set! help (string-append help "skim filename: run file" "\n"))
    (set! help (string-append help "skim -c filename: compile file" "\n"))
    (display help))

  (define (start)
    (define args (command-line))
    ; (display "*** command-line: " ) (print args)
    (define output "")
    (cond
      ((= 1 (length args)) (skim-help))
      ((= 2 (length args))
       (set! output (compile_file (list-ref args 1) #f))
       (skim-js-eval output)
       )
      ((= 3 (length args))
       (let* ((_1 (list-ref args 1))
              (_2 (list-ref args 2)))
         (if (string=? _1 "-c")
             (set! output (compile_file (list-ref args 2) #t))
             (print (string-append "unknown option: '" _1 "'")))
         ))
      (else (skim-help))))
  (start))
